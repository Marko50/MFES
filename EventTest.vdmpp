class EventTest is subclass of Data
/*
  Contains the test cases for the Event and EventManager classes.
*/
types
values
instance variables
 e : Event := new Event("evento1", 15, 10, mk_Date(10,1,2019));
 e2 : Event := new Event("evento2", 15, 10, mk_Date(29,2,2020));
 e3 : Event := new Event("evento3", 15, 10, mk_Date(29,4,2020));
 e4 : Event := new Event("evento4", 15, 10, mk_Date(28,2,2021));
 u : User := new User("dank", "memes");
 em : EventManager := new EventManager({ "evento1" |-> e, "evento2" |-> e2, "evento3" |-> e3, "evento4" |-> e4});
 um : UserManager := new UserManager({"dank" |-> u});
 tm : TicketManager := new TicketManager({|->});
operations
	/*
	 Simulates assertion checking by reducing it to pre-condition checking.
	 If 'arg' does not hold, a pre-condition violation will be signaled.
	*/
	private assertTrue: bool ==> ()
		assertTrue(cond) == return
		pre cond;
	
	-- Checks if getDate returns the right value
	private testGetDate: () ==> ()
	testGetDate() == (
		assertTrue(e.getDate() = mk_Date(10,1,2019));
	);	
	
	-- Checks if getName returns the right value
	private testGetName: () ==> ()
	testGetName() == (
		assertTrue(e.getName() = "evento1");
	);
	
	-- Checks if getCapacity returns the right value
	-- Related to requirement 11
	private testCapacity: () ==> ()
	testCapacity() == (
		assertTrue(e.getCapacity() = 15);
	);
	
	-- Checks if getTicketPrice returns the right value
	private testGetTicketPrice: () ==> ()
	testGetTicketPrice() == (
		assertTrue(e.getTicketPrice() = 10);
	);
	
	-- Adds funds to a user then logs in and buys 2 tickets to "evento1"
	-- Checks if the 2 tickets were added using getTickets
	private testGetTickets : () ==> ()
	testGetTickets() == (
		u.addFunds(100);
		assertTrue(um.login("dank", "memes"));
		um.buyTicket("evento1",tm,em);
		um.buyTicket("evento1",tm,em);
		assertTrue(e.getTickets() = {8,9});
	);
	
	-- Adds funds to a user then logs in and buys 1 tickets to "evento1"
	-- Deletes the ticket then checks if no tickets were bought to the event
	private testRemoveTicket : () ==> ()
	testRemoveTicket() == (
		u.addFunds(100);
		assertTrue(um.login("dank", "memes"));
		um.buyTicket("evento1",tm,em);
		e.removeTicket(10);
		assertTrue(e.getTickets() = {});
	);
	
	-- Checks if event's getFillPercent returns the right value
	-- Related to Requirement 11
	private testGetFillPercent : () ==> ()
	testGetFillPercent() == (
		u.addFunds(100);
		assertTrue(um.login("dank", "memes"));
		um.buyTicket("evento1",tm,em);
		assertTrue(em.getEventFillPercent("evento1") = (1 / 15) * 100);
	);
	
	-- Checks if getEarnings returns the right value
	-- Related to Requirement 3
	private testGetEarnings : () ==> ()
	testGetEarnings() == (
		u.addFunds(100);
		assertTrue(um.login("dank", "memes"));
		um.buyTicket("evento1",tm,em);
		assertTrue(em.getEarnings("evento1") = 10);
	);
	
	-- Promotes an event, checks if popularity increased using e.getPopularity
	-- Related to Requirement 4
	private testPromotion : () ==> ()
	testPromotion() == (
		e.promote();
		assertTrue(e.getPopularity() = 10);
	);
	
	-- Checks if event manager's getEvent returns the right event
	private testManagerGetEvent : () ==> ()
	testManagerGetEvent() == (
		assertTrue(em.getEvent("evento1") = e);
	);
	
	-- Adds an event using event manager
	-- Checks if event was added using event manager's getEvent
	-- Related to Requirement 9
	private testManagerAddEvent : () ==> ()
	testManagerAddEvent() == (
		dcl eventTest : Event := new Event("eventTest",10,10,mk_Date(1,1,2021));
		em.addEvent(eventTest);
		assertTrue(em.getEvent("eventTest") = eventTest);
	);
	
	-- Adds and then removes an event using event manager
	-- Checks if amount of events stays the same after removing
	private testManagerRemoveEvent : () ==> ()
	testManagerRemoveEvent() == (
		dcl eventTest : Event := new Event("eventTest",10,10,mk_Date(1,1,2021));
		em.addEvent(eventTest);
		em.removeEvent("eventTest");
		assertTrue(card dom em.getEvents() = 4);
	);
	
	-- Checks if manager's getEventTickets returns the right tickets from an event
	private testManagerGetEventTickets : () ==> ()
	testManagerGetEventTickets() == (
		u.addFunds(100);
		assertTrue(um.login("dank", "memes"));
		um.buyTicket("evento1",tm,em);
		um.buyTicket("evento1",tm,em);
		assertTrue(card em.getEventTickets("evento1") = 2);
	);
	
	-- Checks if manager's getEventsTicketsUsers returns the right ticket for an event from current user
	-- Related to Requirement 8
	private testManagerGetEventTicketsUser : () ==> ()
	testManagerGetEventTicketsUser() == (
		u.addFunds(100);
		assertTrue(um.login("dank", "memes"));
		um.buyTicket("evento1",tm,em);
		um.buyTicket("evento1",tm,em);
		um.buyTicket("evento2",tm,em);
		assertTrue(card em.getEventTicketsUser("evento1","dank",tm) = 2);
	);
	
	public static main: () ==> ()
	main() == (
		new EventTest().testGetDate();
		new EventTest().testGetName();
		new EventTest().testCapacity();
		new EventTest().testGetTicketPrice();
		new EventTest().testGetTickets();
		new EventTest().testRemoveTicket();
		new EventTest().testGetFillPercent();
		new EventTest().testGetEarnings();
		new EventTest().testPromotion();
		new EventTest().testManagerGetEvent();
		new EventTest().testManagerAddEvent();
		new EventTest().testManagerRemoveEvent();
		new EventTest().testManagerGetEventTickets();
		new EventTest().testManagerGetEventTicketsUser();
	);
functions
traces
end EventTest