class EventManager
/*
  Contains every event.
  Defines the operations available related to events.
*/
types
	public String = seq of char;
values
instance variables
	-- map of event name String to Event, representing every event created
	private events : map String to Event := {|->};
operations
	-- Event manager constructor, receives a map String to Event
	public EventManager : map String to Event ==> EventManager
	EventManager(evs) == (
		events := evs;
		return self;
	)
	post events = evs;
	
	-- Returns map String to Event representing every event
	public pure getEvents : () ==> map String to Event
	getEvents() == (
		return events;
	);
	
	-- Returns a specific Event, receives String for event's name
	public pure getEvent : String ==> Event
	getEvent (e) == (
		return events(e);
	)
	pre e in set dom events;
	
	/*
	 Adds an event to events map
	 Pre condition checks if there isn't an event with same name
	 Post condition checks if event was added to map
	*/
	public addEvent : Event ==> ()
	addEvent(event) == (
		events := events ++ {event.getName() |-> event}
	)
	pre event.getName() not in set dom events
	post events = events~ ++ {event.getName() |-> event};
	
	/*
		Removes an event from events map
		Pre condition checks if event exists in map
		Post condition checks if event was removed
	*/
	public removeEvent : String ==> ()
	removeEvent(e) == (
		events:= {e} <-: events; 
	)
	pre e in set dom events
	post events = {e} <-: events~; 
	
	-- Checks if an event exist in events map, returns a bool and receives event name
	private pure eventExists : String ==> bool
	eventExists(e) == (
		return e in set dom events
	);
	
	/*
	 Returns set of nat for ticket ID's from an event, receives event name
	 Pre condition checks if event exists
	*/
	public pure getEventTickets : String ==> set of nat
	getEventTickets(e) == (
		return events(e).getTickets()
	)
	pre eventExists(e);
	
	/*
	 Returns set of nat for ticket ID's from an event owned by a certain user
	 Receives event name and User name
	 Pre condition checks if event exists
	*/
	public getEventTicketsUser : String*String*TicketManager ==> set of nat
	getEventTicketsUser(e,u,tm) == (
		dcl tickets : set of nat := {};
		for all ticket in set (events(e).getTickets()) do 
		(
			if tm.getTickets()(ticket).getOwner() = u
				then tickets := tickets union {ticket};
		);
		return tickets;
	)
	pre eventExists(e);
	
	/*
	 Returns rat for fill percentage in an event
	 Receives event name
	 Pre condition checks if event exists
	*/
	public getEventFillPercent : String ==> rat
	getEventFillPercent(e) == (
		return events(e).getFillPercent();
	)
	pre eventExists(e);
	
	/*
		Adds a ticket to a specific event
		Receives ticket ID and event name
		Pre condition checks if event exists
	*/
	public addTicket : nat*String ==> ()
	addTicket(t,e) == (
		events(e).addTicket(t);
	)
	pre eventExists(e);
	
	/*
		Returns a rat for a specific event's earnings
		Receives a string for event's name
		Pre condition checks if event exists
	*/
	public getEarnings : String ==> rat
	getEarnings(e) == (
		return events(e).getEarnings();
	)
	pre eventExists(e);
	

functions
traces
end EventManager