class Event
types
-- TODO Define types here
 	public String = seq of char;
 	public Date :: day : nat
 								 month : nat
 								 year : nat
		inv d == d.year > 2018 and 
				d.month <= 12 and
				d.day <=  DaysOfMonth(d.year, d.month);
values
-- TODO Define values here
instance variables
-- TODO Define instance variables here
	private name : String;
	private date : Date;
	private id : nat;
	private capacity : nat;
	private tickets : map nat to Ticket := {|->};
	static count : nat := 0;
operations
-- TODO Define operations here
	public Event : String * nat * Date ==> Event
	Event(n, c, d) == (
		name := n; 
		capacity := c; 
		id := count; 
		count := count + 1; 
		date := d; 
		return self
	)
	pre count >= 0
	post name = n and capacity = c and tickets = {};
		
	public getID : () ==> nat
	getID()==(
		return id;
	);
	
	public getName : () ==> String
	getName()==(
		return name;
	);
	
	public getCapacity : () ==> nat
	getCapacity()==(
		return capacity;
	);
	
	public getTickets : () ==> set of Ticket
	getTickets() == (
		return tickets;
	);
	
functions
-- TODO Define functiones here
	public DaysOfMonth : nat * nat -> nat
	DaysOfMonth(y, m) == 
		if (m = 2) then (
			if isLeapYear(y) then 29
			else 28
		)
		else if (m = 4 or m = 6 or m = 9 or m = 11) then 30
		else 31;
	
	public isLeapYear : nat -> bool
	isLeapYear (y) ==
		y mod 4 = 0 and y mod 100 <> 0 or y mod 400 = 0;
		
traces
-- TODO Define Combinatorial Test Traces here
end Event