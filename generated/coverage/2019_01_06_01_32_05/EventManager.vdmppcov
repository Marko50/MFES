class EventManager
types
-- TODO Define types here
	public String = seq of char;
values
-- TODO Define values here
instance variables
-- TODO Define instance variables here
	private events : map String to Event := {|->};
operations
-- TODO Define operations here
	public EventManager : map String to Event ==> EventManager
	EventManager(evs) == (
		events := evs;
		return self;
	)
	post events = evs;
	
	public pure getEvents : () ==> map String to Event
	getEvents() == (
		return events;
	);
	
	public pure getEvent : String ==> Event
	getEvent (e) == (
		return events(e);
	)
	pre e in set dom events;
	
	public addEvent : Event ==> ()
	addEvent(event) == (
		events := events ++ {event.getName() |-> event}
	)
	pre event.getName() not in set dom events
	post events = events~ ++ {event.getName() |-> event};
	
	public removeEvent : String ==> ()
	removeEvent(e) == (
		events:= {e} <-: events; 
	)
	pre e in set dom events
	post events = {e} <-: events~; 
	
	private pure eventExists : String ==> bool
	eventExists(e) == (return e in set dom events);
	
	public pure getEventTickets : String ==> set of nat
	getEventTickets(e) == (return events(e).getTickets())
	pre eventExists(e);
	
	public getEventTicketsUser : String*String*TicketManager ==> set of nat
	getEventTicketsUser(e,u,tm) == (
		dcl tickets : set of nat := {};
		for all ticket in set (events(e).getTickets()) do 
		(
			if tm.getTickets()(ticket).getOwner() = u
				then tickets := tickets union {ticket};
		);
		return tickets;
	);
	
	public getEventFillPercent : String ==> rat
	getEventFillPercent(e) == (return events(e).getFillPercent();)
	pre eventExists(e);
	
	public addTicket : nat*String ==> ()
	addTicket(t,e) == (
		events(e).addTicket(t);
	)
	pre eventExists(e);
	
	public getEarnings : String ==> rat
	getEarnings(e) == (return events(e).getEarnings();)
	pre eventExists(e);
	

functions
-- TODO Define functiones here
traces
-- TODO Define Combinatorial Test Traces here
end EventManager