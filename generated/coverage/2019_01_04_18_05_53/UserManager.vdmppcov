class UserManager
types
-- TODO Define types here
	public String = seq of char;
values
-- TODO Define values here
instance variables
-- TODO Define instance variables here
  private current_user : String := "";
	private users : map String to User; -- id to User
operations
-- TODO Define operations here
	public UserManager : map String to User ==> UserManager
	UserManager(uss) == (
		users := uss;
		return self;
	);
	
	public login : String * String ==> bool
	login(u,p) == (
		if users(u).getPassword() = p
		then (current_user:= u; return true)
		else return false
	)
	pre u in set dom users;
	
	public logout : () ==> ()
	logout() == (
		current_user := ""
	)
	pre isLoggedIn();
	
	public register : String * String ==> ()
	register(u,p) == (
		users := users ++ {u |-> new User(u,p)};
	)
	pre u not in set dom users;

	public pure getUser : () ==> String
	getUser() == (return current_user;);
	
	public pure getUsers : () ==> map String to User
	getUsers() == (return users;);
	
	private pure isLoggedIn : () ==> bool
	isLoggedIn() == (return current_user <> "" ;);
	
	public buyTicket : Event ==> ()
	buyTicket(e) == (users(current_user).buyTicket(e))
	pre isLoggedIn();
	
	public pure getUserTickets :() ==> map nat to Ticket
	getUserTickets() == (return users(current_user).getTickets())
	pre isLoggedIn();
	
	public getUserTicketsEvent : Event ==> set of Ticket
	getUserTicketsEvent(e) == (
		dcl tickets : set of Ticket;
		for all ticket in set rng (users(current_user).getTickets()) do 
		(
			if ticket.getEvent() = e
				then tickets := tickets union {ticket};
		);
		return tickets;
	);
	
	
	
functions
-- TODO Define functiones here
traces
-- TODO Define Combinatorial Test Traces here
end UserManager