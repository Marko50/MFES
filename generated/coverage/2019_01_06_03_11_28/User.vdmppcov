class User
types
-- TODO Define types here
 	public String = seq of char;
values
-- TODO Define values here
instance variables
-- TODO Define instance variables here
	private name : String;
	private funds : nat := 0;
	private password : String;
	private events : set of String := {};
	private tickets : set of nat := {};
operations
-- TODO Define operations here
	public User: String * String ==> User
	User(n,p) == (
		name := n;
		password := p;
		return self;
	)
	post name = n and password = p and tickets = {} and events = {};
	
	public pure getEvents : () ==> set of String
	getEvents() == (return events;);
	
	public addEvent: String ==> ()
	addEvent(e) == (events := events union {e})
	pre e not in set events;
	
	public removeEvent : String ==> ()
	removeEvent(e) == (events := events \ {e})
	pre e in set events;
	
	public pure getName : () ==> String
	getName() == (
		return name;
	);
	
	public pure getFunds : () ==> nat
	getFunds() == (
		return funds;
	);
	
	public pure getPassword : () ==> String
	getPassword() == (
		return password;
	);
	
	public addFunds : nat ==> ()
	addFunds(f) == (
		funds := funds + f;
	)
	pre funds + f <= 10000
	post funds = funds~ + f;
	
	public removeFunds : nat ==> ()
	removeFunds(f) == (
		funds := funds - f;
	)
	pre funds - f >= 0
	post funds = funds~ - f;
	
	public pure getTickets : () ==> set of nat
		getTickets() == (
		return tickets;
	);
	
	public buyTicket : nat * nat ==> ()
	buyTicket(ticketPrice,t) == (
		removeFunds(ticketPrice);
		addTicket(t);
	);
	
	public addTicket : nat ==> ()
	addTicket(ticket) == (
		tickets := tickets union {ticket};
	)
	pre ticket not in set tickets
	post tickets = tickets~ union {ticket};
	
	public removeTicket : nat ==> ()
	removeTicket(i) == (
		tickets:= tickets \ {i}; 
	)
	pre i in set tickets
	post tickets = tickets~ \ {i}; 
	
	
	public promoteEvent : () ==> ()
	promoteEvent() == (removeFunds(10))
	pre funds - 10 >= 0;
	
functions
-- TODO Define functiones here
traces
-- TODO Define Combinatorial Test Traces here
end User