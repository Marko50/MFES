class Event
types
-- TODO Define types here
 	public String = seq of char;
 	public Date :: day : nat
 								 month : nat
 								 year : nat
		inv d == d.year > 2018 and 
				d.month <= 12 and
				d.day <=  DaysOfMonth(d.year, d.month);
values
-- TODO Define values here
instance variables
-- TODO Define instance variables here
	private name : String;
	private date : Date;
	private capacity : nat;
	private tickets : map nat to Ticket := {|->};
		inv card dom tickets <= capacity;
	private ticketPrice : nat;
operations
-- TODO Define operations here
	public Event : String * nat * nat * Date ==> Event
	Event(n, c, p, d) == (
		name := n; 
		capacity := c; 
		ticketPrice := p;
		date := d; 
		return self
	)
	post name = n and capacity = c and tickets = {|->};
				
	public pure getName : () ==> String
	getName()==(
		return name;
	);
	
	public pure getCapacity : () ==> nat
	getCapacity()==(
		return capacity;
	);
	
	public pure getTicketPrice : () ==> nat
	getTicketPrice()==(
		return ticketPrice;
	);
	
	public pure getFillPercent : () ==> nat
	getFillPercent()==(
		return (card (dom tickets) / capacity ) * 100;
	);
	
	public pure getTickets : () ==> map nat to Ticket
	getTickets() == (
		return tickets;
	);
	
	public pure getTicket : nat ==> Ticket
	getTicket (i) == (
		return tickets(i);
	)
	pre i in set dom tickets;
	
	public addTicket : Ticket ==> ()
	addTicket(ticket) == (
		tickets := tickets ++ {ticket.getID() |-> ticket}
	)
	pre card dom tickets <= capacity and ticket.getID() not in set dom tickets
	post tickets = tickets~ ++ {ticket.getID() |-> ticket};
	
	public removeTicket : nat ==> ()
	removeTicket(i) == (
		tickets:= {i} <-: tickets; 
	)
	pre i in set dom tickets
	post tickets = {i} <-: tickets~; 
	
functions
-- TODO Define functiones here
	public DaysOfMonth : nat * nat -> nat
	DaysOfMonth(y, m) == 
		if (m = 2) then (
			if isLeapYear(y) then 29
			else 28
		)
		else if (m = 4 or m = 6 or m = 9 or m = 11) then 30
		else 31;
	
	public isLeapYear : nat -> bool
	isLeapYear (y) ==
		y mod 4 = 0 and y mod 100 <> 0 or y mod 400 = 0;
		
traces
-- TODO Define Combinatorial Test Traces here
end Event