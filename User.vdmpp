class User
types
-- TODO Define types here
 	public String = seq of char;
values
-- TODO Define values here
instance variables
-- TODO Define instance variables here
	private name : String;
	private funds : nat := 0;
	private password : String;
	private tickets : map nat to Ticket := {|->};
operations
-- TODO Define operations here
	public User: String * String ==> User
	User(n,p) == (
		name := n;
		password := p;
		return self;
	)
	post name = n and password = p and tickets = {|->};
	
	public pure getName : () ==> String
	getName() == (
		return name;
	);
	
	public pure getFunds : () ==> nat
	getFunds() == (
		return funds;
	);
	
	public pure getPassword : () ==> String
	getPassword() == (
		return password;
	);
	
	public addFunds : nat ==> ()
	addFunds(f) == (
		funds := funds + f;
	)
	pre funds + f <= 10000
	post funds = funds~ + f;
	
	public removeFunds : nat ==> ()
	removeFunds(f) == (
		funds := funds - f;
	)
	pre funds - f >= 0
	post funds = funds~ - f;
	
	public pure getTickets : () ==> map nat to Ticket
		getTickets() == (
		return tickets;
	);
	
	public pure getTicket : nat ==> Ticket
	getTicket (i) == (
		return tickets(i);
	)
	pre i in set dom tickets;
	
	public buyTicket : Event ==> ()
	buyTicket(e) == (
		dcl ticketPrice : nat := e.getTicketPrice();
		removeFunds(ticketPrice);
		addTicket(new Ticket(self, e, ticketPrice));
	);
	
	public addTicket : Ticket ==> ()
	addTicket(ticket) == (
		tickets := tickets ++ {ticket.getID() |-> ticket};
		ticket.getEvent().addTicket(ticket);
	)
	pre ticket.getID() not in set dom tickets
	post tickets = tickets~ ++ {ticket.getID() |-> ticket};
	
	public removeTicket : nat ==> ()
	removeTicket(i) == (
		tickets:= {i} <-: tickets; 
	)
	pre i in set dom tickets
	post tickets = {i} <-: tickets~; 
	
	
functions
-- TODO Define functiones here
traces
-- TODO Define Combinatorial Test Traces here
end User